//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

//HELPER FUNCTIONS AND STRUCTURES

UserStorage_store_args = function(args){
  this.user = null
if( args != null ){  if (null != args.user)
  this.user = args.user
}}
UserStorage_store_args.prototype = {}
UserStorage_store_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.user = new UserProfile()
        this.user.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStorage_store_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStorage_store_args')
  if (null != this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1)
    this.user.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

UserStorage_store_result = function(args){
}
UserStorage_store_result.prototype = {}
UserStorage_store_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStorage_store_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStorage_store_result')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

UserStorage_retrieve_args = function(args){
  this.uid = null
if( args != null ){  if (null != args.uid)
  this.uid = args.uid
}}
UserStorage_retrieve_args.prototype = {}
UserStorage_retrieve_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32().value
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStorage_retrieve_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStorage_retrieve_args')
  if (null != this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1)
    output.writeI32(this.uid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

UserStorage_retrieve_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
UserStorage_retrieve_result.prototype = {}
UserStorage_retrieve_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserProfile()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStorage_retrieve_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStorage_retrieve_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

UserStorageClient = function(input, output) {
    this.input  = input
    this.output = null == output ? input : output
    this.seqid  = 0
}
UserStorageClient.prototype = {}
UserStorageClient.prototype.store = function(user){
    this.send_store(user)
  this.recv_store()
}

UserStorageClient.prototype.send_store = function(user){
  this.output.writeMessageBegin('store', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStorage_store_args()
  args.user = user
  args.write(this.output)
  this.output.writeMessageEnd()
  return this.output.getTransport().flush()
}

UserStorageClient.prototype.recv_store = function(){
  var ret = this.input.readMessageBegin()
  var fname = ret.fname
  var mtype = ret.mtype
  var rseqid= ret.rseqid
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.ApplicationException()
    x.read(this.input)
    this.input.readMessageEnd()
    throw x
  }
  var result = new UserStorage_store_result()
  result.read(this.input)
  this.input.readMessageEnd()

  return
}
UserStorageClient.prototype.retrieve = function(uid){
    this.send_retrieve(uid)
  return this.recv_retrieve()
}

UserStorageClient.prototype.send_retrieve = function(uid){
  this.output.writeMessageBegin('retrieve', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStorage_retrieve_args()
  args.uid = uid
  args.write(this.output)
  this.output.writeMessageEnd()
  return this.output.getTransport().flush()
}

UserStorageClient.prototype.recv_retrieve = function(){
  var ret = this.input.readMessageBegin()
  var fname = ret.fname
  var mtype = ret.mtype
  var rseqid= ret.rseqid
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.ApplicationException()
    x.read(this.input)
    this.input.readMessageEnd()
    throw x
  }
  var result = new UserStorage_retrieve_result()
  result.read(this.input)
  this.input.readMessageEnd()

  if (null != result.success ) {
    return result.success
  }
  throw "retrieve failed: unknown result"
}
