//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var Job = module.exports.Job = function(args){
  this.id = null
  this.type = null
  this.increment = null
  this.params = null
  this.period = null
  this.last_run = null
  this.next_run = null
if( args != null ){  if (null != args.id)
  this.id = args.id
  if (null != args.type)
  this.type = args.type
  if (null != args.increment)
  this.increment = args.increment
  if (null != args.params)
  this.params = args.params
  if (null != args.period)
  this.period = args.period
  if (null != args.last_run)
  this.last_run = args.last_run
  if (null != args.next_run)
  this.next_run = args.next_run
}}
Job.prototype = {}
Job.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        var rtmp = input.readI32()
this.id = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        var rtmp = input.readString()
this.type = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        var rtmp = input.readI32()
this.increment = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        var rtmp = input.readString()
this.params = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        var rtmp = input.readString()
this.period = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        var rtmp = input.readString()
this.last_run = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRING) {
        var rtmp = input.readString()
this.next_run = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Job.prototype.write = function(output){ 
  output.writeStructBegin('Job')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1)
    output.writeI32(this.id)
    output.writeFieldEnd()
  }
  if (null != this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2)
    output.writeString(this.type)
    output.writeFieldEnd()
  }
  if (null != this.increment) {
    output.writeFieldBegin('increment', Thrift.Type.I32, 3)
    output.writeI32(this.increment)
    output.writeFieldEnd()
  }
  if (null != this.params) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 4)
    output.writeString(this.params)
    output.writeFieldEnd()
  }
  if (null != this.period) {
    output.writeFieldBegin('period', Thrift.Type.STRING, 5)
    output.writeString(this.period)
    output.writeFieldEnd()
  }
  if (null != this.last_run) {
    output.writeFieldBegin('last_run', Thrift.Type.STRING, 6)
    output.writeString(this.last_run)
    output.writeFieldEnd()
  }
  if (null != this.next_run) {
    output.writeFieldBegin('next_run', Thrift.Type.STRING, 7)
    output.writeString(this.next_run)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

