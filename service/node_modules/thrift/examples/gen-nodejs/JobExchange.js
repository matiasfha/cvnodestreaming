//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = require('./scheduler_types.js');
//HELPER FUNCTIONS AND STRUCTURES

var JobExchange_insert_job_args = function(args){
  this.j = null
if( args != null ){  if (null != args.j)
  this.j = args.j
}}
JobExchange_insert_job_args.prototype = {}
JobExchange_insert_job_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.j = new ttypes.Job()
        this.j.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

JobExchange_insert_job_args.prototype.write = function(output){ 
  output.writeStructBegin('JobExchange_insert_job_args')
  if (null != this.j) {
    output.writeFieldBegin('j', Thrift.Type.STRUCT, 1)
    this.j.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var JobExchange_insert_job_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
JobExchange_insert_job_result.prototype = {}
JobExchange_insert_job_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        var rtmp = input.readI32()
this.success = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

JobExchange_insert_job_result.prototype.write = function(output){ 
  output.writeStructBegin('JobExchange_insert_job_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var JobExchange_get_job_args = function(args){
  this.jid = null
if( args != null ){  if (null != args.jid)
  this.jid = args.jid
}}
JobExchange_get_job_args.prototype = {}
JobExchange_get_job_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        var rtmp = input.readI32()
this.jid = rtmp.value
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

JobExchange_get_job_args.prototype.write = function(output){ 
  output.writeStructBegin('JobExchange_get_job_args')
  if (null != this.jid) {
    output.writeFieldBegin('jid', Thrift.Type.I32, 1)
    output.writeI32(this.jid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var JobExchange_get_job_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
JobExchange_get_job_result.prototype = {}
JobExchange_get_job_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Job()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

JobExchange_get_job_result.prototype.write = function(output){ 
  output.writeStructBegin('JobExchange_get_job_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var JobExchange_get_all_args = function(args){
}
JobExchange_get_all_args.prototype = {}
JobExchange_get_all_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

JobExchange_get_all_args.prototype.write = function(output){ 
  output.writeStructBegin('JobExchange_get_all_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var JobExchange_get_all_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
JobExchange_get_all_result.prototype = {}
JobExchange_get_all_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.SET) {
        {
          var _size0 = 0
          var rtmp3
          this.success = []
          var _etype3 = 0
          rtmp3 = input.readSetBegin()
          _etype3= rtmp3.etype
          _size0 = rtmp3.size
          console.log(rtmp3);
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = new ttypes.Job()
            elem5.read(input)
            this.success.push(elem5)
          }
          input.readSetEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

JobExchange_get_all_result.prototype.write = function(output){ 
  console.log(['get_all_result'], this.success.length);
  output.writeStructBegin('JobExchange_get_all_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0)
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length)
      console.log('output.writeSetBegin', Thrift.Type.STRUCT, this.success.length);
      {
        for(var iter6 in this.success)
        {
          iter6=this.success[iter6]
          iter6.write(output)
        }
      }
      output.writeSetEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var JobExchangeClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
JobExchangeClient.prototype = {}
JobExchangeClient.prototype.insert_job = function(j,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_insert_job(j)
}

JobExchangeClient.prototype.send_insert_job = function(j){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insert_job', Thrift.MessageType.CALL, this.seqid)
  var args = new JobExchange_insert_job_args()
  args.j = j
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

JobExchangeClient.prototype.recv_insert_job = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.ApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new JobExchange_insert_job_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("insert_job failed: unknown result");
}
JobExchangeClient.prototype.get_job = function(jid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_job(jid)
}

JobExchangeClient.prototype.send_get_job = function(jid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_job', Thrift.MessageType.CALL, this.seqid)
  var args = new JobExchange_get_job_args()
  args.jid = jid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

JobExchangeClient.prototype.recv_get_job = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.ApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new JobExchange_get_job_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_job failed: unknown result");
}
JobExchangeClient.prototype.get_all = function(callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get_all()
}

JobExchangeClient.prototype.send_get_all = function(){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_all', Thrift.MessageType.CALL, this.seqid)
  var args = new JobExchange_get_all_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

JobExchangeClient.prototype.recv_get_all = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.ApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new JobExchange_get_all_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get_all failed: unknown result");
}
var JobExchangeProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
JobExchangeProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationException.Type.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

JobExchangeProcessor.prototype.process_insert_job = function(seqid, input, output) {
  var args = new JobExchange_insert_job_args()
  args.read(input)
  input.readMessageEnd()
  var result = new JobExchange_insert_job_result()
  this._handler.insert_job(args.j, function(success) {
    result.success = success
    output.writeMessageBegin("insert_job", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

JobExchangeProcessor.prototype.process_get_job = function(seqid, input, output) {
  var args = new JobExchange_get_job_args()
  args.read(input)
  input.readMessageEnd()
  var result = new JobExchange_get_job_result()
  this._handler.get_job(args.jid, function(success) {
    result.success = success
    output.writeMessageBegin("get_job", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

JobExchangeProcessor.prototype.process_get_all = function(seqid, input, output) {
  var args = new JobExchange_get_all_args()
  args.read(input)
  input.readMessageEnd()
  var result = new JobExchange_get_all_result()
  this._handler.get_all(function(success) {
    result.success = success
    output.writeMessageBegin("get_all", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

