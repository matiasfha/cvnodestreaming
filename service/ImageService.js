//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var ImageService_receiveImage_args = function(args){
  this.image = null
if( args != null ){  if (null != args.image)
  this.image = args.image
}}
ImageService_receiveImage_args.prototype = {}
ImageService_receiveImage_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.image = new ttypes.ImageData()
        this.image.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ImageService_receiveImage_args.prototype.write = function(output){ 
  output.writeStructBegin('ImageService_receiveImage_args')
  if (null != this.image) {
    output.writeFieldBegin('image', Thrift.Type.STRUCT, 1)
    this.image.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ImageService_receiveImage_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
ImageService_receiveImage_result.prototype = {}
ImageService_receiveImage_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ImageService_receiveImage_result.prototype.write = function(output){ 
  output.writeStructBegin('ImageService_receiveImage_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ImageServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
ImageServiceClient.prototype = {}
ImageServiceClient.prototype.receiveImage = function(image,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_receiveImage(image)
}

ImageServiceClient.prototype.send_receiveImage = function(image){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('receiveImage', Thrift.MessageType.CALL, this.seqid)
  var args = new ImageService_receiveImage_args()
  args.image = image
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

ImageServiceClient.prototype.recv_receiveImage = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new ImageService_receiveImage_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("receiveImage failed: unknown result");
}
var ImageServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ImageServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

ImageServiceProcessor.prototype.process_receiveImage = function(seqid, input, output) {
  var args = new ImageService_receiveImage_args()
  args.read(input)
  input.readMessageEnd()
  var result = new ImageService_receiveImage_result()
  this._handler.receiveImage(args.image, function(success) {
    result.success = success
    output.writeMessageBegin("receiveImage", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

