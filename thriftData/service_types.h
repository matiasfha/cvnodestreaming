/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _ImageData__isset {
  _ImageData__isset() : data(false), width(false), height(false) {}
  bool data;
  bool width;
  bool height;
} _ImageData__isset;

class ImageData {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  ImageData() : data(""), width(0), height(0) {
  }

  ImageData(std::string d,int32_t w, int32_t h) : data(d), width(w), height(h) {
  }
  
  virtual ~ImageData() throw() {}

  std::string data;
  int32_t width;
  int32_t height;

  _ImageData__isset __isset;

  bool operator == (const ImageData & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const ImageData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
